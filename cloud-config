#!/bin/bash

set -euo pipefail
pushd "${BASH_SOURCE[0]%/*}" &>/dev/null && 
  trap 'popd &>/dev/null' EXIT

# source libraries
source libs/git.sh
source libs/binaries.sh

# set environment variables
: "${CLOUD_PATH:="$(git::top)/cloud-init"}"
: "${CLOUD_PATHD:=""}"
: "${CLOUD_USER:="user"}"
: "${CLOUD_GROUP:="root"}"
: "${CLOUD_SSH_PUB:="${HOME}/.ssh/id_rsa.pub"}"

# error handling
# shellcheck disable=SC2181
stacktrace() {
  code="${?}"
  [ "${code}" -eq 0 ] || {
    echo -e "\n\033[38;5;196m■■ Stacktrace(${code}): \e[1m${BASH_COMMAND}\e[22m"
    for i in $(seq 1 $((${#FUNCNAME[@]} - 2))); do
      echo -e "${i}. ${BASH_SOURCE[$i]}:${BASH_LINENO[$i]} ➜ ${FUNCNAME[$i]}()"
    done
    echo -e "\033[0m"
  }
}
# trap stacktrace EXIT


# readout local pub key
ssh::pub() {
  # read out pub key without hostname
  cut -d' ' -f-2 "${CLOUD_SSH_PUB}"
}

# returns all config paths
cloud-config::paths() {
  local file="${1-}"

  unset IFS; 
  mapfile -t paths <<<"${CLOUD_PATHD//:/$'\n'}"
  [[ -n "${paths[*]}" ]] || return 0

  for path in "${paths[@]}"; do
    echo "${CLOUD_PATH}/cloud.d/${path}${file}"
  done

  echo "${CLOUD_PATH}${file}"
}

# generates all files base64 encoded
# shellcheck disable=2044
cloud-config::write_files() {
  mapfile -t paths <<<"$(cloud-config::paths '/write_files')"
  local written_paths

  # go thorugh ./write_files folder
  unset IFS; for file in $(find "${paths[@]}" -type f -not -name '*.stat' 2>/dev/null); do
    local path="/${file#"${CLOUD_PATH}"*/write_files/}"
    echo "${written_paths:-}" | grep -Evq "(:|^)${path}:" || continue
    written_paths+="${path}:"

    local stat="${file}.stat"
    # todo: sadly files are written before user is create and without user write_files failes
    local owner="${CLOUD_USER}:${CLOUD_GROUP}"
    # local owner="root:root"
    local permissions='0655'
    local content vars

    content="$(cat "${file}")"
    [ ! -f "${stat}" ] || {
      ! grep -Eq '^owner: .+$' "${stat}" ||
        owner="$(sed -En 's/^owner: (.+)$/\1/p' "${stat}")"
      ! grep -Eq '^permissions: .+$' "${stat}" ||
        permissions="$(sed -En 's/^permissions: (.+)$/\1/p' "${stat}")"
      ! grep -q '^execute: true$' "${stat}" ||
        content="$(bash -c "${content}")"
      ! grep -Eq '^envsubst: .+$' "${stat}" || {
        vars="$(sed -En 's/^envsubst: (.+)$/\1/p' "${stat}")"
        if [ "${vars}" = "true" ]; then
          content="$(envsubst < <(echo "${content}"))"
        else
          content="$(envsubst "${vars}" < <(echo "${content}"))"
        fi
      }
      ! grep -q '^envsubst: true$' "${stat}" ||
        content="$(envsubst <"${file}")"
    }

    cat <<EOF
- encoding: b64
  content: $(echo "${content}" | base64 -w0)
  path: "${path}"
  owner: ${owner}
  permissions: '${permissions}'
EOF
  done
}

# add export variables
cloud-config::runcmd::environment() {
  local -r lookup="CLOUD_ENV_"

  # go though all envs and filter pattern
  local name
  while read -r name; do
    echo "- export ${name#"${lookup}"}='${!name//\'/\\\'}'"
  done < <(env | sed -nE 's/^('"${lookup}"'[^=]+).+$/\1/p')
}

# generate runcmd commands
# shellcheck disable=2044
cloud-config::runcmd::executables() {
  mapfile -t paths <<<"$(cloud-config::paths '/write_files')"
  local written_paths path

  # go through *.stat files
  unset IFS; for file in $(find "${paths[@]}" -type f -name '*.stat' 2>/dev/null); do
    ! grep -q '^runcmd: true$' "${file}" || {
      path="/${file#"${CLOUD_PATH}"*/write_files/}"
      echo "${written_paths:-}" | grep -Evq "(:|^)${path}:" || continue
      written_paths+="${path}:"
      
      echo "- ${path/%.stat}"
    }  
  done
}

# generate packages list
cloud-config::packages() {
  mapfile -t paths <<<"$(cloud-config::paths '/packages')"
  cat "${paths[@]}" 2>/dev/null | uniq
}

# generates nameserver list
cloud-config::nameservers() {
  mapfile -t paths <<<"$(cloud-config::paths '/nameservers')"
  cat "${paths[@]}" 2>/dev/null | uniq
}

# add apt configuration
cloud-config::apt() {
  mapfile -t paths <<<"$(cloud-config::paths '/apt')"
  cat "${paths[@]}" 2>/dev/null | uniq

  mapfile -t paths <<<"$(cloud-config::paths '/sources.list.d')"
  echo "sources:"
  find "${paths[@]}" -type f -exec bash -c '
    echo "  $(basename "${1}"):"
    cat "${1}" | sed -e "s_^_    _"
  ' _ {} \; 2>/dev/null
}

# print cloud-config
cloud-config::generate() {
  cat <<EOF
#cloud-config

package_update: true
package_upgrade: true
package_reboot_if_required: true

disable_root: 1
ssh_pwauth:   0

mounts:
# One of the first things you should do is secure the shared memory used on the system.
- [ tmpfs, /run/shm, "tmpfs", "ro,noexec,nosuid", "0", "0" ]

apt:
$(cloud-config::apt | sed -e 's_^_    _')

packages:
$(cloud-config::packages | sed -e 's_^_- _')

manage-resolv-conf: true
resolv_conf:
  nameservers:
$(cloud-config::nameservers | sed -e 's_^_  - _')

write_files:
$(cloud-config::write_files)

users:
- name: "${CLOUD_USER}"
  lock_passwd: true
  shell: /bin/bash
  ssh-authorized-keys:
  - "$(ssh::pub)"
  groups:
  - docker
  sudo:
  - ALL=(ALL) NOPASSWD:ALL

runcmd:
# https://bugs.launchpad.net/cloud-init/+bug/1486113/comments/12
- cloud-init single --name write_files --frequency once
# set environment variables
$(cloud-config::runcmd::environment)
# run executable scripts
$(cloud-config::runcmd::executables | sort)

final_message: "The system is finally up, after \$UPTIME seconds"
EOF
}

# will be executed if script is called directly
cloud-config() {
  [ -d "${CLOUD_PATH}" ] || {
    echo "🐮 cloud-init path does not exists: ${CLOUD_PATH}"
    return 1
  }

  # generate complete cloud-config
  cloud-config::generate
}

# only execute if called directly
[[ "${0}" != "${BASH_SOURCE[0]}" ]] || cloud-config "${@}"
