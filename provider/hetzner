#!/bin/bash

set -euo pipefail
pushd "${BASH_SOURCE[0]%/*}" &>/dev/null && 
  trap 'popd &>/dev/null' EXIT

# source libraries
source ../libs/git.sh
source ../libs/binaries.sh
source ../cloud-config

# set environment variables
: "${CLOUD_PATH:="$(git::top)/cloud-init"}"
: "${CLOUD_PATH_BASE:="$(git::base)"}"
: "${CLOUD_PATH_BINARIES:="${CLOUD_PATH_BASE}/.bin"}"
: "${CLOUD_HETZNER_JSON:="${CLOUD_PATH}/hetzner.json"}"

: "${CLOUD_DRY_RUN_PATH:="${CLOUD_PATH}/dry-run"}"
: "${CLOUD_DRY_RUN_FILE_CMD:="${CLOUD_DRY_RUN_PATH}/dry-run-cmd.log"}"
: "${CLOUD_DRY_RUN_PATH_CLOUDCONFIG:="${CLOUD_DRY_RUN_PATH}/cloud-config"}"

dry-run::cmd() {
  mkdir -p "${CLOUD_DRY_RUN_PATH}"
  if [ -n "${CLOUD_DRY_RUN-}" ]; then
    echo "${@}" | tee -a "${CLOUD_DRY_RUN_FILE_CMD}"
  else
    "${@}"
  fi
}
dry-run::cloud-config() {
  mkdir -p "${CLOUD_DRY_RUN_PATH_CLOUDCONFIG}"
  if [ -n "${CLOUD_DRY_RUN-}" ]; then
    echo -n "${2}" > "${CLOUD_DRY_RUN_PATH_CLOUDCONFIG}/${1}.conf"
  fi
  echo -n "${2}"
}

hetzner::json() {
  jq "${@}" <(echo "${CLOUD_HETZNER_JSON}")
}

hetzner::json::edit() {
  CLOUD_HETZNER_JSON="$(
    hetzner::json "${@}"
  )"
}

hetzner::json::loop() {
  local what="${1}"
  [[ "${what:0:1}" == "." ]] ||
    what=".[\"${what}\"]"
  local fields="${2:-".id, .name"}"
  hetzner::json -r "${what} | keys[] as \$i | .[\$i] | [\$i, ${fields}] | @csv" | tr -d '"'
}

hetzner::create() {
  local -r what="${1}"; shift
  local -r create_after="$(type -t hetzner::create::after)"
  local -r create_hook="$(type -t hetzner::create::hook)"

  local i id name
  while IFS=',' read -r i id name; do
    [[ -z "${id}" ]] || {
      echo -e "🦗 skip \033[3m${what}\033[0m \033[1m${name}\033[0m (${id})"

      # execute hook if defined
      [[ -z "${create_after-}" ]] ||
        hetzner::create::after

      continue
    }

    # fetch all fields
    # shellcheck disable=2016
    mapfile -t fields < <(hetzner::json -rc \
      --arg what "${what}" \
      --argjson i "${i}" '. as $root |
        .[$what][$i] 
          | to_entries 
          | .[] 
          | "--" + .key, ( 
            if .value 
              | type == "number" 
            then
              $root[.key][.value].id
            elif .value 
              | type == "array" 
            then
              [ .key as $key
                | .value[] 
                | $root[$key][.].id
              ] | @csv
            else
              .value
            end
        )
      '
    )

    # filter args from fields
    local field
    local -a cmd=() args=()
    for (( x=0; x < ${#fields[@]}; x=x+2 )); do
      [[ "${fields[x]:2:1}" != "#" ]] ||
        continue

      args+=("${fields[x]/%#*}" "${fields[x + 1]}")
    done

    # check for create hook
    cmd=( 'dry-run::cmd' 'hcloud' "${what}" 'create' "${args[@]}" "${@}" )
    [[ -z "${create_hook-}" ]] ||
      cmd=( "hetzner::create::hook" "${cmd[@]}" )

    echo -e "📦 create \033[3m${what}\033[0m \033[1m${name}\033[0m"
    echo -e "   \e[94m$ " "${cmd[@]}" "\e[0m"
    echo
    "${cmd[@]}"
    echo

    # execute hook if defined
    [[ -z "${create_after-}" ]] ||
      hetzner::create::after
  done < <(hetzner::json::loop "${what}")
  unset IFS

  # free hook functions
  unset -f \
    hetzner::create::hook \
    hetzner::create::after

  # refresh json
  hetzner::lookup "${what}"
}

hetzner::ssh-key() {
  # create all ssh-keys
  hetzner::create 'ssh-key'
}

hetzner::floating-ip() {
  # create all floating-ips
  hetzner::create 'floating-ip'
}

hetzner::network() {
  # create hook
  hetzner::create::after() {
    # todo make this prettier...
    local x network_zone type ip_range
    local -a subargs
    subargs=()

    while IFS=',' read -r x network_zone type ip_range vswitch_id; do
      echo -e "   ⭐ add \033[3msubnet\033[0m ${ip_range}"
      # check if subnet exists already
      if hcloud network describe "${name}" | grep -q "${ip_range}"; then
        echo -e "🦗 skip \033[3msubnet\033[0m \033[1m${ip_range}\033[0m"
        continue
      fi
      echo

      [ -z "${vswitch_id}" ] ||
        subargs+=("--vswitch-id" "${vswitch_id}")

      dry-run::cmd hcloud network add-subnet "${name}" \
        --network-zone "${network_zone}" \
        --type "${type}" \
        --ip-range "${ip_range}" "${subargs[@]}"
      echo
    done < <(
      hetzner::json::loop \
        ".network[${i}][\"#subnets\"]" '.["network-zone"], .type, .["ip-range"], .["vswitch-id"]' \
        2>/dev/null
    )
    unset IFS
  }

  # create all networks if not already
  hetzner::create 'network'
}

hetzner::server() {
  # create hook
  hetzner::create::after() {
    local findex fid
    findex="$(hetzner::json -r ".server[${i}][\"#floating-ip\"]")"
    [ "${findex}" != "null" ] ||
      return 0

    fid="$(hetzner::json -r ".[\"floating-ip\"][${findex}].id")"
    dry-run::cmd hcloud floating-ip assign "${fid}" "${name}"
    echo
  }
  # execute hook within a subshell to keep envs clean
  hetzner::create::hook() { (
    # set environment variables
    for (( i=0; i < ${#fields[@]}; i=i+2 )); do
      field="${fields[i]#--}"

      # set CLOUD_PATHD for multiple configs
      [[ "${field}" != "#cloud.d" ]] ||
        export CLOUD_PATHD="${fields[i+1]}"

      # set for cloud-config script
      # shellcheck disable=SC2001
      field="$(echo "${field^^}" | sed "s/[^A-Z]/_/g")"
      export "CLOUD_ENV_${field}=${fields[i+1]}"
    done

    # execute command
    dry-run::cmd "${@}" \
      --user-data-from-file <(dry-run::cloud-config "${name}" "$(cloud-config::generate)")
  ) }
    
  # create all servers
  hetzner::create 'server'
}

hetzner::volume() {
  # create all volumes
  hetzner::create 'volume'
}

hetzner::lookup() {
  local resources="${1-}"
  [[ -n "${resources}" ]] ||
    mapfile -t resources < <(hetzner::json -r 'keys[]')

  for resource in "${resources[@]}"; do 
    echo -e "☁️  fetching \033[3m${resource}\033[0m..."

    # shellcheck disable=2016
    hetzner::json::edit -r \
      --argfile remote <(hcloud "${resource}" list -ojson) \
      --arg field "${resource}" 'if $remote == null then . else
        .[$field] = [ .[$field][] | .name as $name | 
          . + reduce $remote[] as $item ({}; 
            if $item.name == $name then $item | {id} else . end
          ) 
        ]
      end'
  done
}

hetzner() {
  # check if there is a active context
  context="$(hcloud context active)"
  [ -n "${context}" ] || {
    echo -e "err: 🥶 select a hcloud context"
    return 2
  }
  echo -e "🔏 hcloud \033[3mcontext\033[0m \033[1m${context}\033[0m"

  # check if there are instructions
  if [[ ! -f "${CLOUD_HETZNER_JSON}" ]]; then 
    echo -e "err: 🥶 no such file: ${CLOUD_HETZNER_JSON}"
    return 3
  fi

  # collect hetzner.json and substitute
  CLOUD_HETZNER_JSON="$(envsubst <"${CLOUD_HETZNER_JSON}")"

  # resource provisioning
  hetzner::lookup; echo
  hetzner::ssh-key; echo
  hetzner::floating-ip; echo
  hetzner::network; echo
  hetzner::server; echo
  hetzner::volume; echo

  # print out result
  hetzner::json '.' > "${CLOUD_PATH}/hetzner.dump.json"
}

# only execute if called directly
[[ "${0}" != "${BASH_SOURCE[0]}" ]] || hetzner "${@}"
